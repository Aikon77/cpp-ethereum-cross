#-------------------------------------------------------------------------------
# Dockerfile for cross-compiling the Ethereum C++ components for mobile Linux
# platforms such as Tizen, Sailfish and Ubuntu Touch.  Assumes that we have
# previous built the cross-compiler and can just copy that into our
# container.
#
# TARGET_ARCHITECTURE is an environment variable used to parameterize this
# process.
#
# See http://ethereum.org/ to learn more about Ethereum.
# See http://doublethink.co/ to learn more about doublethinkco
#
# (c) 2015 Kitsilano Software Inc
#-------------------------------------------------------------------------------

FROM ubuntu:14.04
MAINTAINER Bob Summerwill <bob@summerwill.net>

# We need to use an extra PPA (Personal Package Archive) for CMake 3.x
# builds.   The package archive for the Ubuntu Trusty (14.04) image only
# comes with CMake 2.8.x, which is not new enough to build Ethereum
#
# See https://launchpad.net/~george-edison55/+archive/ubuntu/cmake-3.x
# for more details on this archive.
RUN apt-get install -y software-properties-common
RUN add-apt-repository ppa:george-edison55/cmake-3.x
RUN apt-get update
RUN apt-get upgrade -y

# External packages required by our scripts
RUN apt-get install -y \
  bzip2=1.0.6-5 \
  cmake=3.2.2-2ubuntu2~ubuntu14.04.1~ppa1 \
    git=1:1.9.1-1ubuntu0.1 \
     m4=1.4.17-2ubuntu1 \
   tree=1.6.0-1 \
  unzip=6.0-9ubuntu1.5 \
   wget=1.15-1ubuntu1.14.04.1

# Install the official armel and armhf cross-compiler packages.
# It might be possible to use these rather than building our own toolchain
# with crosstool-NG while we're just aiming to build generic ARM binaries
# which can be used on a broad range of devices.   As-and-when we start
# cross-building device-specific binaries, we're probably going to want to
# either build our own custom toolchains using crosstool-NG, or to use
# cross-build tools provided officially with the platforms themselves.
RUN apt-get install -y g++-arm-linux-gnueabi g++-arm-linux-gnueabihf

# Switch to a normal user account.
RUN useradd -ms /bin/bash xcompiler
USER xcompiler

# Clone the webthree-umbrella repo into the docker container, including sub-modules
WORKDIR /home/xcompiler
RUN git clone --recursive https://github.com/ethereum/webthree-umbrella.git

# wget, untar and unzip the prebuilt cross-compiler.
# Ignore non-zero return code error caused by HTTPS re-direct to CDN.
#
# NB: This prebuilt binary ONLY contains the cross-compiler which we
# built ourselves for "arm-unknown-linux-gnuabi".  Other ABI targets
# are going to need further toolchains building or installing.
#
RUN wget ‐‐output-document=x-tools.tar.gz https://github.com/doublethinkco/webthree-umbrella-cross/releases/download/0.0.2/x-tools.tar.gz; exit 0
RUN tar xvfz x-tools.tar.gz

# Copy our cross-building scripts into the container
ADD cross-build/ /home/xcompiler/webthree-umbrella/cross-build/

# Use that cross-compiler to build the ARM executable
WORKDIR /home/xcompiler/webthree-umbrella/cross-build/ethereum
RUN ./main.sh ~/x-tools/$TARGET_ARCHITECTURE
